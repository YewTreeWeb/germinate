#!/usr/bin/env bash

### Variables ###

count=1

reset="\033[0m"
highlight="\033[41m\033[97m"
dot="\033[31m▸ $reset"
dim="\033[2m"
black=$(tput setaf 0)
purple="\033[1;35m"
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
tag_green="\e[30;42m"
tag_blue="\e[30;46m"
bold=$(tput bold)
normal=$(tput sgr0)
underline="\e[37;4m"
indent="   "

internet=false

# Get full directory name of this script
cwd="$(cd "$(dirname "$0")" && pwd)"

### Text Formatting ###

cecho() {
  echo "${2}${1}${reset}"
  return
}

heading() {
    local head="$1"; shift
    cecho "\n  ${bold}$((count++)). $head${normal}\n ─────────────────────────────────────────────────────\n" $white
}

### System checks ###

check_bash_version() {
    if ((BASH_VERSINFO[0] < 3))
    then
        print_error "Sorry, you need at least bash-3.0 to run this script."
        exit 1
    fi
}

get_os() {

    local os=""
    local kernelName=""

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    kernelName="$(uname -s)"

    if [ "$kernelName" == "Darwin" ]; then
        os="macOS"
    elif [ "$kernelName" == "Linux" ] && [ -e "/etc/lsb-release" ]; then
        os="ubuntu"
    else
        os="$kernelName"
    fi

    printf "%s" "$os"

}

get_os_version() {

    local os=""
    local version=""

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    os="$(get_os)"

    if [ "$os" == "macOS" ]; then
        version="$(sw_vers -productVersion)"
    elif [ "$os" == "ubuntu" ]; then
        version="$(lsb_release -d | cut -f2 | cut -d' ' -f2)"
    fi

    echo $version

}

check_macos_version() {
    local catalina="10.15"

    mac="$(get_os)"
    version="$(get_os_version)"

    if [ $mac == "macOS" ]; then
        if [ "$(printf '%s\n' "$catalina" "$version" | sort -V | head -n1)" = "$catalina" ]; then
            cecho "I'm Catalina" $purple
        else
            cecho "I'm old!" $blue
        fi
    fi
}

check_internet_connection() {
    if [ ping -q -w1 -c1 google.com &>/dev/null ]; then
        cecho "No internet found! Please check your internet connection." $red
        exit 0
    else
        cecho "You have an internet connection!" $green
        internet=true
    fi
}

admin_pass() {
    # Ask for the administrator password upfront.

    sudo -v &> /dev/null

    # Update existing `sudo` time stamp
    # until this script has finished.
    #
    # https://gist.github.com/cowboy/3118588

    # Keep-alive: update existing `sudo` time stamp until script has finished
    while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

    cecho "Password cached to " $green

}

