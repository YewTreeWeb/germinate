#!/usr/bin/env bash

### Variables ###

count=1

reset="\033[0m"
highlight="\033[41m\033[97m"
dot="\033[31m▸ $reset"
dim="\033[2m"
black=$(tput setaf 0)
purple="\033[1;35m"
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
tag_green="\e[30;42m"
tag_blue="\e[30;46m"
bold=$(tput bold)
normal=$(tput sgr0)
underline="\e[37;4m"
indent="   "

internet=false

# Get full directory name of this script
cwd="$(cd "$(dirname "$0")" && pwd)"

# Home location
home='${HOME}/greenhouse/'
tmp='storage/shell.log'

### Text Formatting ###

cecho() {
    echo "${2}${1}${reset}"
    return
}

heading() {
    local head="$1"
    shift
    cecho "\n  ${bold}$((count++)). $head${normal}\n ─────────────────────────────────────────────────────\n" $white
}

### System checks ###

check_bash_version() {
    if ((BASH_VERSINFO[0] < 3)); then
        print_error "Sorry, you need at least bash-3.0 to run this script."
        exit 1
    fi
}

get_os() {

    local os=""
    local kernelName=""

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    kernelName="$(uname -s)"

    if [ "$kernelName" == "Darwin" ]; then
        os="macOS"
    elif [ "$kernelName" == "Linux" ] && [ -e "/etc/lsb-release" ]; then
        os="ubuntu"
    else
        os="$kernelName"
    fi

    printf "%s" "$os"

}

get_os_version() {

    local os=""
    local version=""

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    os="$(get_os)"

    if [ "$os" == "macOS" ]; then
        version="$(sw_vers -productVersion)"
    elif [ "$os" == "ubuntu" ]; then
        version="$(lsb_release -d | cut -f2 | cut -d' ' -f2)"
    fi

    echo $version

}

check_macos_version() {
    local catalina="10.15"

    mac="$(get_os)"
    version="$(get_os_version)"

    if [ $mac == "macOS" ]; then
        if [ "$(printf '%s\n' "$catalina" "$version" | sort -V | head -n1)" = "$catalina" ]; then
            cecho "I'm Catalina" $purple
        else
            cecho "I'm old!" $blue
        fi
    fi
}

check_internet_connection() {
    if [ ping -q -w1 -c1 google.com ] &>/dev/null; then
        cecho "No internet found! Please check your internet connection." $red
        exit 0
    else
        cecho "You have an internet connection!" $green
        internet=true
    fi
}

admin_pass() {
    # Ask for the administrator password upfront.

    sudo -v &>/dev/null

    # Update existing `sudo` time stamp
    # until this script has finished.
    #
    # https://gist.github.com/cowboy/3118588

    # Keep-alive: update existing `sudo` time stamp until script has finished
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done 2>/dev/null &

    cecho "Password cached to " $green

}

### Misc Functions ###
# Update your package managers including NPM, Homebrew, Yarn, Ruby Gems and Composer.
# Use the flag -g to update global packages.
# Usage: update-packages npm -g
function update-packages() {
    local package="${1:-0}"

    if [ $package == 'node' ]; then
        sudo npm cache clean -f
        sudo npm install -g n
        sudo n stable
        sudo chown -R $(whoami):admin ~/.npm
        sudo chown -R $(whoami):admin ~/.config
    elif [ $package == 'npm' ]; then
        npm i -g npm
        npm update -g
    elif [ $package == 'yarn' ]; then
        yarn global upgrade
    elif [ $package == 'gem' ]; then
        gem update
    elif [ $package == 'wp' ]; then
        wp cli update
    elif [ $package == 'ruby' ]; then
        brew upgrade rbenv ruby-build
        rbenv install $(rbenv install -l | grep -v - | tail -1)
        rbenv local $(rbenv install -l | grep -v - | tail -1)
    elif [ $package == 'brew' ]; then
        brew update
        brew upgrade
        brew cleanup
        brew cask cleanup
    elif [ $package == 'composer' ]; then
        composer selfupdate
        composer global upgrade
    elif [ $package == 'all' ]; then
        cecho "###" $dim
        printf "\n"
        cecho "Warning: This will update everything including Node! Continue update y/N " $dim
        printf "\n"
        cecho "###" $dim
        read everything
        if [ $everything == 'y' ] || [ $everything == 'Y' ]; then
            cecho '### Updating Brew. ###' $dim
            printf "\n"
            brew update
            brew upgrade
            brew cleanup
            brew cask cleanup
            cecho '### Updating Ruby Gems. ###' $dim
            printf "\n"
            gem update
            cecho '### Updating Composer and Composer packages. ###' $dim
            printf "\n"
            composer selfupdate
            composer global upgrade
            cecho '### Updating WP-CLI. ###' $dim
            printf "\n"
            wp cli update
            cecho '### Updating Node and NPM. ###' $dim
            printf "\n"
            echo '// Now clearing Node cache.'
            sudo npm cache clean -f
            echo '// Now starting Node upgrade.'
            sudo npm i -g n
            sudo n stable
            sudo chown -R $(whoami):admin ~/.npm
            sudo chown -R $(whoami):admin ~/.config
            cecho '// Starting NPM upgrade.' $dim
            npm i -g npm
            npm update -g
            cecho '### Updating Ruby. ###' $dim
            printf "\n"
            brew upgrade rbenv ruby-build
            rbenv install $(rbenv install -l | grep -v - | tail -1)
            rbenv local $(rbenv install -l | grep -v - | tail -1)
            printf "###\n"
            printf "\n"
            cecho "Success: All your systems development environments and packages have been updated!" $green
            printf "\n"
            printf "###\n"
        fi
    else
        cecho "###" $dim
        printf "\n"
        cecho "Upgrading packages with default options." $dim
        printf "\n"
        cecho "###" $dim
        brew update
        brew upgrade
        brew cleanup
        brew cask cleanup
        npm i -g npm
        npm update -g
        gem update
        composer selfupdate
        composer global upgrade
        wp cli update
    fi
}
