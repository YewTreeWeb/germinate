#!/bin/sh

### Variables ###

# Colours
reset="\033[0m"
highlight="\033[41m\033[97m"
dot="\033[31m▸ $reset"
dim="\033[2m"
black=$(tput setaf 0)
purple="\033[1;35m"
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
tag_green="\e[30;42m"
tag_blue="\e[30;46m"
bold=$(tput bold)
normal=$(tput sgr0)
underline="\e[37;4m"
indent="   "


internet=false
env=null

# Save Homebrew’s installed location.
BREW_PREFIX="$(brew --prefix)"

# Get full directory name of this script
location="$(cd "$(dirname "$0")" && pwd)"

# Shell environment variables
zshDIR="$(command -v zsh)"
bashDIR="$(command -v bash)"
shellExports="$HOME/.shell_modules/.exports"

### Text Formatting ###

# Display outputted text in a chosen colour.
cecho() {
    echo "${2}${1}${reset}"
    return
}

# Create a formatted heading in the terminal.
heading() {
    local head="$1"; shift
    cecho "\n  ${bold}$((count++)). $head${normal}\n ─────────────────────────────────────────────────────\n" $white
}

installing() {
    local install="$1"; shift
    printf "  [↓] $install " "$@"
}

step() {
    printf "\n   ${dot}${underline}$@${reset}\n"
}

### System checks ###

# Get the current bash version running.
check_bash_version() {
    if ((BASH_VERSINFO[0] < 3)); then
        print_error "Sorry, you need at least bash-3.0 to run this script."
        exit 1
    fi
}

# Get and display the system's OS.
get_os() {

    local os=""
    local kernelName=""

    kernelName="$(uname -s)"

    if [ "$kernelName" == "Darwin" ]; then
        os="macOS"
    elif [ "$kernelName" == "Linux" ] && [ -e "/etc/lsb-release" ]; then
        os="ubuntu"
    else
        os="$kernelName"
    fi

    printf "%s" "$os"

}

# Get the current version of the system's OS.
get_os_version() {

    local os=""
    local version=""
    os="$(get_os)"

    if [ "$os" == "macOS" ]; then
        version="$(sw_vers -productVersion)"
    fi

    echo $version
}

# Check if the current session has access to the internet.
check_internet_connection() {
    if [ ping -q -w1 -c1 google.com ] &>/dev/null; then
        cecho "No internet found! Please check your internet connection." $red
        exit 0
    else
        cecho "You have an internet connection!" $green
        internet=true
    fi
}

# Cache the sudo password.
admin_pass() {
    # Ask for the administrator password upfront.

    sudo -v &>/dev/null

    # Update existing `sudo` time stamp
    # until this script has finished.
    #
    # https://gist.github.com/cowboy/3118588

    # Keep-alive: update existing `sudo` time stamp until script has finished
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done 2>/dev/null &

    cecho "Password cached to system." $green

}

### Misc ###

# Create and add content to SSH config file
create_ssh_config() {
touch ~/.ssh/config
cat <<EOT >> ~/.ssh/config
	Host *
		AddKeysToAgent yes
		UseKeychain yes
        ForwardAgent yes
        IdentitiesOnly yes
        IdentityFile ~/.ssh/id_rsa
EOT
}

# Add NVM paths to shell profile
setup_nvm() {

cat <<EOT >> $shellExports
# NVM
export NVM_DIR="$HOME/.nvm"
NVM_HOMEBREW="/usr/local/opt/nvm/nvm.sh"
[ -s "$NVM_HOMEBREW" ] && \. "$NVM_HOMEBREW"
export PATH="$HOME/.npm-packages/bin:$PATH"
[ -x "$(command -v npm)" ] && export NODE_PATH=$NODE_PATH:`npm root -g`
[[ -r $NVM_DIR/bash_completion ]] && \. $NVM_DIR/bash_completion
EOT

}

# If user wants to install NPM packages with Yarn, add global path to shell profile
install_with_yarn() {

cat <<EOT >> $shellExports
export PATH="$(yarn global bin):$PATH"
EOT

}

# If user chooses Bash as shell env, then remove Apple warning to use ZSH
supress_zsh_warning() {

cat <<EOT >> $shellExports
# Supress zsh warning
export BASH_SILENCE_DEPRECATION_WARNING=1
EOT

}

# Find PHP memory files and change the limit to a higher amount
fix_php_memory() {

local phpVersion=$(php -v | grep ^PHP | cut -d' ' -f2)
local phpShortVersion=$(php -v | grep ^PHP | cut -d' ' -f2 | rev | cut -c 3- | rev)

if [ -d "/usr/local/etc/php/$phpVersion/" ];
then
    sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpVersion/php.ini
    sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpVersion/conf.d/php-memory-limits.ini
fi

if [ -d "/usr/local/etc/php/$phpShortVersion/" ];
then
    sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpShortVersion/php.ini
    sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpShortVersion/conf.d/php-memory-limits.ini
fi

}

# Install and setup ZSH completions
zsh_completion() {

brew install zsh-completions
cat <<EOT >> ~/.zshrc
# ZSH Completion
if type brew &>/dev/null; then
    FPATH=${BREW_PREFIX}/share/zsh/site-functions:$FPATH
fi
EOT
rm -f ~/.zcompdump; compinit
chmod go-w "${BREW_PREFIX}/share"
chmod go-w "/usr/local/share"

}

# Check if there is a .zshrc file. If not copy Greenhouse's zshrc.
# If there is a zshrc then prepend the reference to the zprofile.
create_zshrc() {
    if [ ! -f "$HOME/.zshrc" ];
    then
        cp $location/seeds/.zshrc $HOME
    else
        echo -e '# Reference zprofile\n[ -n "$PS1" ] && source ~/.zprofile;' | cat - $HOME/.zshrc > temp && mv temp $HOME/.zshrc
    fi
}

# Install/Set shell env to ZSH
install_zsh() {

if test "$(which brew)"
then
    if [ "$zshDIR" != '/usr/local/bin/zsh' ];
    then
        brew install zsh

        # Switch to using brew-installed zsh as default shell
        if ! fgrep -q "${BREW_PREFIX}/bin/zsh" /etc/shells; then
            echo "${BREW_PREFIX}/bin/zsh" | sudo tee -a /etc/shells;
            chsh -s "${BREW_PREFIX}/bin/zsh";
        fi;
    else
        brew upgrade zsh 2> /dev/null
        cecho "ZSH successfully updated to latest version." $green
    fi

    # Change shell to modern zsh.
    sudo chsh -s "$zshDIR" "$USER"

    cecho "Shell set to ZSH." $green
else
    # Use default location for shell env - /bin/zsh
    sudo chsh -s "$zshDIR" "$USER"

    cecho "Shell set to system default ZSH." $green
fi

# Create or modify .zshrc
create_zshrc

zshFiles=$(find $HOME/.zsh/ -mindepth 1 | wc -l)

# Clone ZSH dependency repos to `~/.zsh/` directory
cd $HOME/.zsh

if [ ! -d "$HOME/.oh-my-zsh" ];
then
    # Download Oh My ZSH
    step "Installing Oh My ZSH..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    cecho "Oh My ZSH installed." $green
else
    cecho "Oh My ZSH already installed. Skipping..." $dim
fi

if [ ! -d "$HOME/.zsh/fast-syntax-highlighting" ];
then
    # Install syntax highlighting
    step "Installing syntax highlighting..."
    git clone git@github.com:zdharma/fast-syntax-highlighting.git 2>/dev/null
    cecho "Syntax highlighting installed." $green
else
    cecho "Syntax highlighting already installed. Skipping..." $dim
fi

if [ ! -f "$HOME/.zsh/completion.zsh" ];
then
    # Install completion plugin
    step "Installing completion plugin..."
    wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/lib/completion.zsh 2>/dev/null
    cecho "Completion plugin installed." $green
else
    cecho "Completion plugin already installed. Skipping..." $dim
fi

if [ ! -d "$HOME/.zsh/zsh-autosuggestions" ];
then
    # Download 'zsh-autosuggestions' plugin
    step "Installing zsh-autosuggestions..."
    git clone git@github.com:zsh-users/zsh-autosuggestions.git 2>/dev/null
    cecho "zsh-autosuggestions installed." $green
else
    cecho "zsh-autosuggestions already installed. Skipping..." $dim
fi

if [ ! -f "$HOME/.zsh/history.zsh" ];
then
    # Download history config
    step "Installing history config..."
    wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/lib/history.zsh 2>/dev/null
    cecho "History config installed." $green
else
    cecho "History config already installed. Skipping..." $dim
fi

if [ ! -f "$HOME/.zsh/key-bindings.zsh" ];
then
    # Download key bindings config
    step "Installing key bindings config..."
    wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/lib/key-bindings.zsh 2>/dev/null
    cecho "Key bindings config installed." $green
else
    cecho "Key bindings config already installed. Skipping..." $dim
fi

# Go back to $location
cd $location

# Check if zsh-completions is installed
# if test "$(which brew)"
# then
#     if test "$(brew info zsh-completions)"
#     then
#         cecho "zsh-completions already installed. Skipping..." $dim
#     else
#         zsh_completion
#     fi
# fi

echo "zsh" > $location/storage/shell.log

}

# Install/Set shell to bash
install_bash() {

if test "$(which brew)"
then
    if [ "$bashDIR" != '/usr/local/bin/bash' ];
    then
        brew install bash
        # Switch to using brew-installed bash as default shell
        if ! fgrep -q "${BREW_PREFIX}/bin/bash" /etc/shells; then
            echo "${BREW_PREFIX}/bin/bash" | sudo tee -a /etc/shells;
            chsh -s "${BREW_PREFIX}/bin/bash";
        fi;
    else
        brew upgrade bash 2> /dev/null
        cecho "Bash successfully updated to latest version." $green
    fi

    # Change shell to modern bash.
    sudo chsh -s "$bashDIR" "$USER"

    cecho "Shell set to Bash." $green
else
    # Use default location for shell env - /bin/bash
    sudo chsh -s "$bashDIR" "$USER"
    cecho "Shell set to system default Bash." $green
fi

# Check if there is a .bashrc file. If not copy Greenhouse's bashrc.
# If there is a bashrc then prepend the reference to the bash_profile.
if [ ! -f "$HOME/.bashrc" ];
then
    cp $location/seeds/.bashrc $HOME
else
    echo -e '# Reference bash_profile\n[ -n "$PS1" ] && source ~/.bash_profile;' | cat - $HOME/.bashrc > temp && mv temp $HOME/.bashrc
fi

# Check if bash-completion2 is installed
if test "$(which brew)"
then
    if test "$(brew info bash-completion2)"
    then
        cecho "bash-completion already installed. Skipping..." $dim
    else
        brew install bash-completion2
    fi
fi

echo "bash" > $location/storage/shell.log

}