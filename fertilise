#!/bin/sh

### Variables ###

count=1

reset="\033[0m"
highlight="\033[41m\033[97m"
dot="\033[31m▸ $reset"
dim="\033[2m"
black=$(tput setaf 0)
purple="\033[1;35m"
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
tag_green="\e[30;42m"
tag_blue="\e[30;46m"
bold=$(tput bold)
normal=$(tput sgr0)
underline="\e[37;4m"
indent="   "

sierra=10.12.2
catalina=10.15
version=""

internet=false

env=null

# Get full directory name of this script
cwd="$(cd "$(dirname "$0")" && pwd)"

# Home location
# location='${HOME}/greenhouse/'
location='${PWD}'

# Shell environment variables
shellExports='$HOME/.shell_modules/.exports'

### Text Formatting ###

# Display outputted text in a chosen colour.
cecho() {
    echo "${2}${1}${reset}"
    return
}

# Create a formatted heading in the terminal.
heading() {
    local head="$1"; shift
    cecho "\n  ${bold}$((count++)). $head${normal}\n ─────────────────────────────────────────────────────\n" $white
}

installing() {
    local install="$1"; shift
    printf "  [↓] $install " "$@"
}

step() {
    printf "\n   ${dot}${underline}$@${reset}\n"
}

### System checks ###

# Get the current bash version running.
check_bash_version() {
    if ((BASH_VERSINFO[0] < 3)); then
        print_error "Sorry, you need at least bash-3.0 to run this script."
        exit 1
    fi
}

# Get and display the system's OS.
get_os() {

    local os=""
    local kernelName=""

    kernelName="$(uname -s)"

    if [ "$kernelName" == "Darwin" ]; then
        os="macOS"
    elif [ "$kernelName" == "Linux" ] && [ -e "/etc/lsb-release" ]; then
        os="ubuntu"
    else
        os="$kernelName"
    fi

    printf "%s" "$os"

}

# Get the current version of the system's OS.
get_os_version() {

    local os=""
    os="$(get_os)"

    if [ "$os" == "macOS" ]; then
        version="$(sw_vers -productVersion)"
    fi

    echo $version
}

# Check if the current session has access to the internet.
check_internet_connection() {
    if [ ping -q -w1 -c1 google.com ] &>/dev/null; then
        cecho "No internet found! Please check your internet connection." $red
        exit 0
    else
        cecho "You have an internet connection!" $green
        internet=true
    fi
}

# Cache the sudo password.
admin_pass() {
    # Ask for the administrator password upfront.

    sudo -v &>/dev/null

    # Update existing `sudo` time stamp
    # until this script has finished.
    #
    # https://gist.github.com/cowboy/3118588

    # Keep-alive: update existing `sudo` time stamp until script has finished
    while true; do
        sudo -n true
        sleep 60
        kill -0 "$$" || exit
    done 2>/dev/null &

    cecho "Password cached to system." $green

}

### Misc ###
create_ssh_config() {
touch ~/.ssh/config
cat <<EOT >> ~/.ssh/config
	Host *
		AddKeysToAgent yes
		UseKeychain yes
        ForwardAgent yes
        IdentitiesOnly yes
        IdentityFile ~/.ssh/id_rsa
EOT
}

setup_nvm() {

cat <<EOT >> $shellExports
# NVM
export NVM_DIR="$HOME/.nvm"
NVM_HOMEBREW="/usr/local/opt/nvm/nvm.sh"
[ -s "$NVM_HOMEBREW" ] && \. "$NVM_HOMEBREW"

export PATH="$HOME/.npm-packages/bin:$PATH"

[ -x "$(command -v npm)" ] && export NODE_PATH=$NODE_PATH:`npm root -g`
EOT

}

install_with_yarn() {

cat <<EOT >> $shellExports
export PATH="$(yarn global bin):$PATH"
EOT

}

supress_zsh_warning() {

cat <<EOT >> $shellExports
# Supress zsh warning
export BASH_SILENCE_DEPRECATION_WARNING=1
EOT

}

fix_php_memory() {
    local phpVersion=$(php -v | grep ^PHP | cut -d' ' -f2)
    local phpShortVersion=$(php -v | grep ^PHP | cut -d' ' -f2 | rev | cut -c 3- | rev)

    if [ -d "/usr/local/etc/php/$phpVersion/" ];
    then
        sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpVersion/php.ini
        sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpVersion/conf.d/php-memory-limits.ini
    fi

    if [ -d "/usr/local/etc/php/$phpShortVersion/" ];
    then
        sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpShortVersion/php.ini
        sed -i "" -e "s/memory_limit = 128M/memory_limit = 1000M/g" /usr/local/etc/php/$phpShortVersion/conf.d/php-memory-limits.ini
    fi
}