#!/bin/sh

### ERROR: display error if script failure. ###
trap 'ret=$?; test $ret -ne 0 && printf "\n ⛔️\e\033[0;31m  Germination failed!! \e\033[0m ⛔️\n" >&2; exit $ret' EXIT

set -e

### Get required file ###
if [ $(grep "zsh" $location/storage/shell.log) ]; then
	DIR="${(%):-%N}"
else
	DIR="${BASH_SOURCE[0]}"
fi

if [ -e fertilise ]; then
	cd "$(dirname "$DIR")" \
		&& . "fertilise"
else
	printf "\n ⚠️ ./fertilise not found.\n"
	exit 1
fi

### Run Inital Script ###

printf "${green}
  ____                     _   _                      
 / ___|_ __ ___  ___ _ __ | | | | ___  _   _ ___  ___ 
| |  _| '__/ _ \/ _ \ '_ \| |_| |/ _ \| | | / __|/ _ \
| |_| | | |  __/  __/ | | |  _  | (_) | |_| \__ \  __/
 \____|_|  \___|\___|_| |_|_| |_|\___/ \__,_|___/\___|
${normal}"

printf "
LET'S START ${bold}PLANTING${normal}!
This is a shell script that aims to setup and/or maintain your Mac.
The script will ${green}install${reset}, ${blue}update${reset}, ${purple}backup${reset}, ${red}restore${reset}, or ${yellow}skip${reset} packages.

----
${bold}System Info:${normal}
// OS: ${dim}$(get_os) ${normal} // OS Version: ${dim}$(get_os_version) ${normal} // Shell: ${dim}$BASH ${normal} // Shell Version: ${dim}$BASH_VERSION${reset}

${dim}Copyright © 2020 | Mathew Teague.${normal}
----
\n
"

if [ $(get_os) != "macOS" ]; then
	cecho "Your current OS isn't compatible with GreenHouse.\n" $red
	exit;
fi

##############################
# Pre-install check. #
##############################
heading "Checking your internet connection..."
check_internet_connection

##############################
# Ask user for command #
##############################
heading "What would you like to plant? 🌱"
printf "
 ${bold}1) ${normal}Setup Mac
 ${bold}2) ${normal}Update
 ${bold}3) ${normal}Backup
 ${bold}4) ${normal}Restore
\n
"
read -n 1 -s -r -p "> " choice

if [[ $choice = '' ]]; then
	exit;
else
	##############################
	# Ask for and cache sudo password #
	##############################
	heading "Let's start by getting your admin password"
	admin_pass
	case $choice in
		1)
			##############################
			# Install dependencies #
			##############################
			heading "Installing System Dependencies…"

			if [ ! $internet ];
			then
				cecho "No internet connection avaliable! Please connect to the internet when possible and try again.\n" $red
				exit;
			fi

			# Check if system bin folder exists.
			# if [ ! -d "$HOME/.bin/" ]; then
			# 	mkdir "$HOME/.bin"
			# fi

			# # Check if system sbin folder exists.
			# if [ ! -d "$HOME/.sbin/" ]; then
			# 	mkdir "$HOME/.sbin"
			# fi
			
			# # Check if xcode is installed. If not install it.
			# if type xcode-select >&- && xpath=$( xcode-select --print-path ) &&
			# 	test -d "${xpath}" && test -x "${xpath}" ; then
			# 	cecho "Xcode already installed. Skipping..." $dim
			# else
			# 	step "Installing Xcode..."
			# 	xcode-select --install
			# 	cecho "Xcode successfully installed." $green
			# fi


			# # Check for Brew installation.
			# if test ! "$(which brew)"
			# then
			# 	step "Installing Homebrew..."
			# 	## Don't prompt for confirmation when installing homebrew
			# 	/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null
			# 	cecho "Homebrew successfully installed." $green
			# else
			# 	cecho "Homebrew already installed. Skipping..." $dim
			# fi

			# # Installing shell enviornment.
			# step "Setting up the Shell environment..."
			# if [ ! -f $location/storage/shell.log ]; then
			# 	printf "Which shell would you like to us? b/z "
			# 	read shell
			# 	touch $location/storage/shell.log
			# 	if [[ $shell =~ ^([bB][bashBash]|[bB])$ ]]; then
			# 		chsh -s /bin/bash
			# 		echo "bash" > $location/storage/shell.log
			# 		cecho "Shell set to Bash." $green
			# 		printf '\n'
			# 	else
			# 		if [ "$(printf '%s\n' "$catalina" "$version" | sort -V | head -n1)" >= "$catalina" ]; then
			# 			chsh -s /bin/zsh
			# 			echo "zsh" > $location/storage/shell.log
			# 		else
			# 			brew install zsh
			# 			brew install zsh-completions
			# 			sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
			# 			chsh -s $(which zsh)
			# 			echo "zsh" > $location/storage/shell.log
			# 		fi
			# 		cecho "Shell set to ZSH." $green
			# 		printf '\n'
			# 	fi
			# else
			# 	printf "It looks like you have a shell environment set. Would you like to change it? y/N "
			# 	read shellChange
			# 	if [[ $shellChange =~ ^([yY])$ ]]; then
			# 		step "Changing shell..."
			# 		if [ $(grep "zsh" $location/storage/shell.log) ]; then
			# 			chsh -s /bin/bash
			# 			echo "bash" > $location/storage/shell.log

			# 			# Remove bash system files.
			# 			if [ -f "$HOME/.zshrc" ]; then
			# 				rm -rf $HOME/.zshrc
			# 			fi

			# 			cecho "Shell environment changed to Bash." $yellow
			# 			printf '\n'
			# 		else
			# 			if [ ! "$(printf '%s\n' "$catalina" "$version" | sort -V | head -n1)" >= "$catalina" ]; then
			# 				chsh -s /bin/zsh
			# 				echo "zsh" > $location/storage/shell.log
			# 			else
			# 				brew install zsh
			# 				brew install zsh-completions
			# 				sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
			# 				chsh -s $(which zsh)
			# 				echo "zsh" > $location/storage/shell.log
			# 			fi

			# 			# Remove bash system files.
			# 			if [ -f "$HOME/.bashrc" ]; then
			# 				rm -rf $HOME/.bashrc
			# 			fi

			# 			cecho "Shell environment changed to ZSH." $yellow
			# 			printf '\n'
			# 		fi
			# 	else
			# 		cecho "Shell already configured. Skipping..." $dim
			# 		printf '\n'
			# 	fi
			# fi

			# ##############################
			# # Add dotfiles #
			# ##############################

			# heading "Adding system dotfiles"

			# # Check if user has chosen ZSH or Bash.
			# if [ $(grep "zsh" $location/storage/shell.log) ]; then
			# 	step "Copying ZSH files..."
			# 	cp $location/seeds/.zshrc $HOME

			# 	# Check if system module folder exists.
			# 	if [ ! -d "$HOME/.modules/" ]; then
			# 		mkdir $HOME/.shell_modules
			# 	fi
			# else
			# 	step "Copying Bash files..."
			# 	cp $location/seeds/.bashrc $HOME

			# 	# Check if system module folder exists.
			# 	if [ ! -d "$HOME/.modules/" ]; then
			# 		mkdir $HOME/.shell_modules
			# 	fi

			# 	# Supress Mac warning to use ZSH.
			# 	supress_zsh_warning
			# fi

			# cp $location/seeds/.profile $HOME
			# cp $location/seeds/.aliases $HOME/.shell_modules
			# cp $location/seeds/.exports $HOME/.shell_modules
			# cp $location/seeds/.functions $HOME/.shell_modules
			# cp $location/seeds/.prompt $HOME/.shell_modules
			
			# # Check if .extra file exists and add it to the system modules folder.
			# if [ -f "$location/seeds/.extra" ]; then
			# 	cp $location/seeds/.extra $HOME/.shell_modules
			# fi

			# step "Adding other dotfiles..."
			# cp $location/seeds/.gitattributes $HOME
			# cp $location/seeds/.gitconfig $HOME
			# cp $location/seeds/.gitignore $HOME
			# cp $location/seeds/.gvimrc $HOME
			# cp $location/seeds/.vimrc $HOME
			# cp $location/seeds/.vim $HOME
			# cp $location/seeds/.editorconfig $HOME
			# cp $location/seeds/.curlrc $HOME

			# cecho "All dotfiles have been added." $green

			# #############################################
			# # Create a system SSH key #
			# #See: https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/
			# #############################################
			# heading "Creating system SSH key"

			# # Check if ssh folder exists.
			# if [ ! -d "$HOME/.ssh/" ]; then
			# 	mkdir "$HOME/.ssh"
			# fi

			# step "Creating key and adding to agent."
			# cd $HOME/.ssh
			# read -p 'Input email for ssh key: ' sshEmail
			# ssh-keygen -t rsa -b 4096 -C "$sshEmail"  # will prompt for password
			# eval "$(ssh-agent -s)"
			# cd $HOME
			
			# # If the OS version is equal to or higher than Sierra then ssh key will not be able to be saved to keychain.
			# if [ "$(printf '%s\n' "$sierra" "$version" | sort -V | head -n1)" <= "$sierra" ]; then
			# 	step "Adding SSH key to keychain..."
			# 	ssh-add -K $HOME/.ssh/id_rsa
			# 	cecho "Successfully created SSH config file. Now creating SSH config file..." $green
			# else
			# 	ssh-add $HOME/.ssh/id_rsa
			# 	cecho "Unable to add SSH key to keychain as your OS version is greater than ${sierra}. Now creating SSH config file..." $yellow
			# fi

			# if [ -e $HOME/.ssh/config ]
			# then
			# 	cecho "An SSH config file already exists. Skipping... " $dim
			# else
			# 	step "Creating a new SSH config file with default settings..."
			# 	create_ssh_config
			# 	cecho "Successfully created SSH config file." $green
			# fi

			# #############################################
			# # Add ssh-key to GitHub via api #
			# #############################################

			# echo "Adding ssh-key to GitHub (via api)..."
			# echo "Important! For this step, use a github personal token with the admin:public_key permission."
			# echo "If you don't have one, create it here: https://github.com/settings/tokens/new"

			# retries=3
			# SSH_KEY=`cat ~/.ssh/id_rsa.pub`

			# for ((i=0; i<retries; i++)); do
			# 	read -p 'GitHub username: ' ghusername
			# 	read -p 'Machine name: ' ghtitle
			# 	read -sp 'GitHub personal token: ' ghtoken

			# 	gh_status_code=$(curl -o /dev/null -s -w "%{http_code}\n" -u "$ghusername:$ghtoken" -d '{"title":"'$ghtitle'","key":"'"$SSH_KEY"'"}' 'https://api.github.com/user/keys')

			# 	if (( $gh_status_code -eq == 201))
			# 	then
			# 		echo "GitHub ssh key added successfully!"
			# 		break
			# 	else
			# 			echo "Something went wrong. Enter your credentials and try again..."
			# 			echo -n "Status code returned: "
			# 			echo $gh_status_code
			# 	fi
			# done

			# [[ $retries -eq i ]] && echo "Adding ssh-key to GitHub failed! Try again later."

			# ##############################
			# # Install Brews #
			# ##############################

			# heading "Installing Homebrew brews"

			# if [ -e $cwd/seeds/brews ]; 
			# then
			# 	step "Installing Homebrew formulaes..."

			# 	if test "$(which brew)"
			# 	then
			# 		brew tap homebrew/bundle
			# 		for brew in $(<$cwd/seeds/brews); do
			# 			if test ! "$(brew list | grep $brew)"; then
			# 				installing "Installing $brew"
			# 				brew install $brew >/dev/null
			# 				cecho "${bold}✓ $brew formula installed${normal}\n" $green
			# 			else
			# 				cecho "$brew has already been installed. Skipped...\n" $dim
			# 			fi
			# 		done
			# 	else
			# 		cecho "Homebrew may not be installed or you may not have internet. Please try again.\n" $red
			# 	fi
			# fi

			# if [ -e $cwd/seeds/brewcasks ]; 
			# then
			# 	step "Installing Homebrew casks/apps..."

			# 	if test "$(which brew)"
			# 	then
			# 		brew tap homebrew/cask-fonts
			# 		brew tap homebrew/cask-versions
			# 		brew tap heroku/brew
			# 		for cask in $(<$cwd/seeds/brewcasks); do
			# 			if test ! "$(brew cask list | grep $cask)"; then
			# 				installing "Installing $cask"
			# 				brew cask install $cask >/dev/null
			# 				cecho "${bold}✓ $cask installed${normal}\n" $green
			# 			else
			# 				cecho "$cask has already been installed. Skipped...\n" $dim
			# 			fi
			# 		done
			# 	else
			# 		cecho "Homebrew may not be installed or you may not have internet. Please try again.\n" $red
			# 	fi
			# fi

			# # Run a Homebrew cleanup.
			# if test "$(which brew)"
			# then
			# 	step "Cleaning up Homebrew..."
			# 	brew cleanup 2> /dev/null
			# 	brew cleanup cask 2> /dev/null
			# 	brew bundle 2> /dev/null
			# fi

			# #############################################
			# # Install Fonts #
			# #############################################

			# heading "Installing fonts..."

			# # SourceCodePro + Powerline + Awesome Regular (for powerlevel 9k terminal icons)
			# cd ~/Library/Fonts && { curl -O 'https://github.com/Falkor/dotfiles/blob/master/fonts/SourceCodePro+Powerline+Awesome+Regular.ttf?raw=true' ; cd -; }

			# ###############################################################################
			# # Install Mac Store Apps #
			# ###############################################################################

			# heading "Installing apps from the Mac Apps store"

			# if test "$(which mas)"
			# then
			# 	echo "Opening App Store. Please login to continue."
			# 	open "/Applications/App Store.app"
			# 	read -p "Has login completed successfully (y/n)? " loginConfirm

			# 	if [ $loginConfirm != "${loginConfirm#[Yy]}" ] && [ -f $cwd/seeds/apps ];
			# 	then
			# 		step "Installing App Store apps..."
			# 		for app in $(<$cwd/seeds/apps); do
			# 			# Remove App names from list.
			# 			app=${app%%:*}

			# 			# Install app.
			# 			if test ! "$(mas list | grep $app)"; then
			# 				installing "Installing $app"
			# 				mas install $app >/dev/null
			# 				cecho "${bold}✓ $app gem installed${normal}\n" $green
			# 			else
			# 				cecho "$app has already been installed. Skipped...\n" $dim
			# 			fi
			# 		done

			# 		cecho "Successfully installed App Store apps." $green
			# 	else
			# 		cecho "App Store login aborted. Skipping..." $dim
			# 	fi
			# else
			# 	cecho "There appears to be a problem with mas. Please re-install and try again." $red
			# fi

			# ###############################################################################
			# # Install Mac None Store Apps #
			# ###############################################################################

			# heading "Installing apps from the web"

			# # Check if Composer is already installed.
			# # Check if restore folder exists
			# if [ ! -d "$location/pottingshed" ]; then
			# 	mkdir "$location/pottingshed"
			# fi
			# if [ ! -d "$location/pottingshed/apps" ]; then
			# 	mkdir "$location/pottingshed/apps"
			# fi
			
			# if [ ! -f /Applications/Popcorn-Time.app ];
			# then
			# 	step "Downloading PopcornTime..."
			# 	cd $location/pottingshed/apps
			# 	wget https://get.popcorntime.sh/build/Popcorn-Time-0.3.10-Mac.zip 2> /dev/null
			# 	unzip Popcorn-Time-0.3.10-Mac.zip 2> /dev/null
			# 	mv Popcorn-Time.app /Applications
			# 	cecho "Successfully downloaded and installed PopcornTime." $green
			# else
			# 	cecho "PopcornTime already installed. Skipping..." $dim

			# if [ ! -f /Downloads/FileZilla_3.46.3_macosx-x86_sponsored-setup.dmg ];
			# then
			# 	step "Downloading File..."
			# 	wget https://download.filezilla-project.org/client/FileZilla_3.46.3_macosx-x86_sponsored-setup.dmg 2> /dev/null
			# 	mv FileZilla_3.46.3_macosx-x86_sponsored-setup.dmg /Downloads
			# 	cecho "Downloaded FileZilla into Downloads folder" $green
			# else
			# 	cecho "FileZilla already downloaded. Skipping..." $dim
			# fi

			# # Come out of pottingshed.
			# cd $location

			# ###############################################################################
			# # Install Node with NVM & NPM packages #
			# ###############################################################################

			# heading "Node with NVM & NPM packages"

			# # Install NVM to manage Node.
			# step "Installing NVM..."
			# if [[ ! "$(which nvm)" ]];
			# then
			# 	if [ ! $(grep "nvm" $location/seeds/brews) ];
			# 	then
			# 		curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash
			# 	fi
			# fi

			# if [ ! -f ~/.nvmrc ];
			# then
			# 	touch ~/.nvmrc
			# fi

			# echo "lts/*" > .nvmrc
			# setup_nvm

			# cecho "NVM has been installed and configured." $green

			# step "Installing latest Node & LTS Node..."
			# nvm install node
			# nvm run node --version
			# nodeVersion=$(node -v)
			# nvm install --lts node
			# nvm use --lts
			# nvm alias default --lts
			# nodeLTSVersion=$(node -v)

			# cecho "Successfully installed NVM and Node. Node version: $nodeVersion and LTS version: $nodeLTSVersion\n" $green
			# cecho "To use the latest version of Node as default run ${bold}nvm alias default node${normal} or ${bold}nvm alias default stable${normal}\n" $dim

			# step "Installing NPM packages..."
			# read -p "Would you like to use Yarn or NPM? yarn/npm" installPkg

			# if [ -e $cwd/seeds/npm ];
			# then
			# 	if [ $installPkg == 'yarn' ];
			# 	then
			# 		if test "$(which yarn)"
			# 		then
			# 			install_with_yarn
			# 			xargs yarn global add < $location/seeds/npm
			# 		else
			# 			cecho "Yarn not installed. To use Yarn run ${bold}brew install yarn${normal} or ${bold}curl -o- -L https://yarnpkg.com/install.sh | bash${normal}. Defaulting to NPM..." $yellow
			# 			xargs npm install -g < $location/seeds/npm
			# 		fi
			# 	else
			# 		xargs npm install -g < $location/seeds/npm
			# 	fi
			# fi
			# cecho "All NPM packages installed." $green
			
			# ###############################################################################
			# # Setup Ruby and install Ruby gems #
			# ###############################################################################

			# heading "Setting up Ruby and installing Ruby gems"

			# if test ! "$(which rbenv)"
			# then
			# 	cecho "Unable to install latest Ruby version. Please check your Homebrew installation and try again.\n" $red
			# else
			# 	step "Configuring Ruby..."
			# 	rubyVersion=$(rbenv install -l | grep -v - | tail -1)

			# 	rbenv install $rubyVersion
			# 	rbenv global $rubyVersion
			# fi

			# if test ! "$(gem -v)"
			# then
			# 	cecho "Unable to install Ruby gems.\n" $red
			# else
			# 	step "Installing Ruby gems..."
			# 	for gem in $(<$cwd/seeds/gems); do
			# 		if test ! "$(gem list | grep $gem)"; then
			# 			installing "Installing $gem"
			# 			gem install $gem >/dev/null
			# 			cecho "${bold}✓ $gem gem installed${normal}\n" $green
			# 		else
			# 			cecho "$gem has already been installed. Skipped...\n" $dim
			# 		fi
			# 	done

			# 	cecho "Successfully installed Ruby gems." $green
			# fi
			
			# ###############################################################################
			# # Install Composer and packages #
			# ###############################################################################

			# heading "Installing Composer and packages"

			# # Check if Composer is already installed.
			# # Check if subdirectoy folder exists
			# if [ ! -d "$location/pottingshed" ]; then
			# 	mkdir "$location/pottingshed"
			# fi
			# if [ ! -d "$location/pottingshed/composer" ]; then
			# 	mkdir "$location/pottingshed/composer"
			# fi

			# if [[ ! "$(which composer)" ]]; then
			# 	step "Installing Composer..."

			# 	cd $location/pottingshed/composer
			# 	php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
			# 	php -r "if (hash_file('sha384', 'composer-setup.php') === 'c5b9b6d368201a9db6f74e2611495f369991b72d9c8cbd3ffbc63edff210eb73d46ffbfce88669ad33695ef77dc76976') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
			# 	php composer-setup.php
			# 	php -r "unlink('composer-setup.php');"

			# 	# Check if /usr/local/bin/composer exists.
			# 	if [ ! -d "/usr/local/bin/composer" ]; then
			# 		mkdir /usr/local/bin/composer
			# 	fi

			# 	# Move composer file to bin so it can be a global command.
			# 	mv composer.phar /usr/local/bin/composer

			# 	# Switch directory back to project root.
			# 	cd $location

			# 	# Clean out composer subdirectory to preserve space.
			# 	rm -rf $location/pottingshed/composer

			# 	cecho "Successfully installed Composer." $green
			# else
			# 	cecho "Composer already installed. Skipping..." $dim
			# fi

			# if [[ "$(which composer)" ]]; then
			# 	step "Installing Composer packages..."
			# 	for composer in $(<$cwd/seeds/composer); do
			# 		if test ! "$(composer global info | grep $composer)"; then
			# 			installing "Installing $composer"
			# 			composer global require $composer >/dev/null
			# 			cecho "${bold}✓ $composer package installed${normal}\n" $green
			# 		else
			# 			cecho "$composer has already been installed. Skipped...\n" $dim
			# 		fi
			# 	done
			# else
			# 	cecho "Unable to install Composer packages. Please try again." $red
			# fi

			# ###############################################################################
			# # Install WP-CLI and packages #
			# ###############################################################################

			# heading "Installing WP-CLI and packages"

			# # Check if Composer is already installed.
			# # Check if restore folder exists
			# if [ ! -d "$location/pottingshed" ]; then
			# 	mkdir "$location/pottingshed"
			# fi
			# if [ ! -d "$location/pottingshed/wpcli" ]; then
			# 	mkdir "$location/pottingshed/wpcli"
			# fi

			# if [[ ! "$(which wp)" ]]; then
			# 	step "Installing WP-CLI..."
			# 	cd $location/pottingshed/wpcli
			# 	curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
			# 	chmod +x wp-cli.phar

			# 	# Check if /usr/local/bin/wp exists.
			# 	if [ ! -d "/usr/local/bin/wp" ]; then
			# 		mkdir /usr/local/bin/wp
			# 	fi

			# 	# Move wp-cli.phar file to bin so we can just use the wp command.
			# 	mv wp-cli.phar /usr/local/bin/wp

			# 	# Switch directory back to project root.
			# 	cd $location

			# 	# Clean out wpcli subdirectory to preserve space.
			# 	rm -rf $location/pottingshed/wpcli

			# 	# Resolve PHP Fatal error: Allowed memory size of 999999 bytes exhausted.
			# 	fix_php_memory

			# 	cecho "Successfully installed WP-CLI." $green
			# else
			# 	cecho "WP-CLI already installed. Skipping..." $dim
			# fi

			# if [[ "$(which wp)" ]]; then
			# 	step "Installing WP-CLI packages..."
			# 	for wp in $(<$cwd/seeds/wpcli); do
			# 		if test ! "$(wp package list | grep $wp)"; then
			# 			installing "Installing $wp"
			# 			wp package install $wp >/dev/null
			# 			cecho "${bold}✓ $wp package installed${normal}\n" $green
			# 		else
			# 			cecho "$wp has already been installed. Skipped...\n" $dim
			# 		fi
			# 	done
				
			# 	cecho "Successfully installed WP-CLI packages." $green
			# else
			# 	cecho "Unable to install packages. Please try again." $red
			# fi
			
			# ###############################################################################
			# # Install Python packages #
			# ###############################################################################

			# heading "Installing Python packages"

			# if test ! "$(pip list)"; then
			# 	cecho "Unable to install Python packages. Please try again." $red
			# else
			# 	step "Installing Python packages..."
			# 	pip install --upgrade pip
			# 	pip install --user pylint
			# 	pip install --user flake8
			# 	cecho "Successfully installed packages." $green
			# fi

			# #############################################
			# # Set OSX Preferences - Borrowed from https://github.com/mathiasbynens/dotfiles/blob/master/.macos #
			# #############################################

			# # Close any open System Preferences panes, to prevent them from overriding
			# # settings we’re about to change
			# osascript -e 'tell application "System Preferences" to quit'

			# # Ask for the administrator password upfront
			# sudo -v

			# # Keep-alive: update existing `sudo` time stamp until `.macos` has finished
			# while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
			
			# ###############################################################################
			# # Adding Mac Preferences #
			# ###############################################################################

			# heading "Configuring Mac settings"
			
			# # Load macos file within the seeds directory into grow file.
			# if [[ ! -d "$DIR" ]]; 
			# then
			# 	DIR="$PWD"
			# 	. "$DIR/seeds/macos"

			# 	cecho "All Mac settings configured and set. You may need to restart your terminal.\n" $green
			# else
			# 	cecho "\n ⚠️ $DIR/seeds/macos not found.\n" $red
			# fi

			# cecho "All seeds are sown. May the plants be ever in your favour!" $green
			# printf '\n'
			;;
		2)
			echo 'Updating'
			if [ "$(printf '%s\n' "$catalina" "$version" | sort -V | head -n1)" = "$catalina" ]; then
				cecho "Latest version!!" $green
			else
				cecho "old version" $red
			fi
			;;
		3)
			##############################
			# Backing Up #
			##############################
			heading "Backing up packages"

			# Save brew formulaes to log file.
			if test ! "$(which brew)"
			then
				cecho "Unable to backup Homebrew formulaes. Please check your Homebrew installation." $red
			else 
				step "Backing up formulaes..."
				brew list | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/storage/brews.log
				cecho "Successfully backed up all Homebrew formulaes." $green
			fi

			# Save brew casks to log file.
			if [[ ! "$(brew cask list)" ]]; then
				cecho "Unable to backup Homebrew casks. Please check your Homebrew installation." $red
			else
				step "Backing up casks..."
				brew cask list | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/storage/brewcasks.log
				cecho "Successfully backed up all Homebrew casks." $green
			fi

			# Save gems to log file.
			if test ! "$(gem -v)"
			then
				cecho "Unable to backup Ruby gems." $red
			else
				step "Backing up gems..."
				gem list --no-versions >> $location/storage/gems.log
				gem cleanup
				cecho "Successfully backed up all gems." $green
			fi

			# Save npm modules to log file.
			# todo: if npm directory exists and if node is installed.
			step "Backing up npm modules..."
			if [[ ! "$(npm -v)" ]]; then
				cecho "Unable to backup NPM modules." $red
			else
				npm list --global --parseable --depth=0 | sed '1d' | awk '{gsub(/\/.*\//,"",$1); print}' >> $location/storage/npm.log
				cecho "Successfully backed up all npm modules." $green
			fi

			# Take a copy of composer.json
			step "Backing up composer packages..."
			if [[ ! "$(which composer)" ]]; then
				cecho "Unable to backup Composer packages." $red
			else
				cp ~/.composer/composer.json $location/storage/composer.json
				cp ~/.composer/composer.lock $location/storage/composer.lock
				cecho "Successfully backed up all packages." $green
			fi
			
			# Take a copy of wp-cli packages
			step "Backing up wp-cli plugins..."
			if [[ ! "$(which wp)" ]]; then
				cecho "Unable to backup WP-CLI plugins." $red
			else
				cp ~/.wp-cli/packages/composer.json $location/storage/wp-cli.json
				cp ~/.wp-cli/packages/composer.lock $location/storage/wp-cli.lock
				cecho "Successfully backed up all plugins." $green
			fi

			printf '\n'
			cecho "Safely stored for the Winter." $green
			printf '\n'
			;;
		4)
			##############################
			# Restoring #
			##############################
			heading "Restoring packages"

			# Check if restore folder exists
			if [ ! -d "$location/pottingshed" ]; then
				mkdir "$location/pottingshed"
			fi
			
			# Restoring gems
			if test ! "$(gem -v)"
			then
				cecho "Unable to restore Ruby gems." $red
			else
				if [ ! -d "$location/pottingshed/gems" ]; then
					mkdir "$location/pottingshed/gems"
				fi

				step "Restoring you Ruby gems..."
				if [ -f $location/storage/gems.log ];
				then
					cp $location/storage/gems.log $location/pottingshed/gems/gems.log
					cd $location/pottingshed/gems
					xargs gem unpack < $location/pottingshed/gems.log

					if [ $internet ];
					then
						xargs gem install < $location/pottingshed/gems.log
						printf '\n'
					else
						cecho "No internet connection detected. Restoring current gems. Please update when possible." $yellow
						xargs -I gemname gem build gemname/gemname.gemspec < $location/pottingshed/gems.log
						printf '\n'
					fi

					cd $location
					rm -rf $location/pottingshed/gems/* # Remove all unpacked gems to save storage.
					cecho "Successfully backed up all gems." $green
				else
					cecho "No gem backup file found. Unable to restore Ruby gems." $red
				fi
			fi

			cecho "It's been a long winter but let's get those plants flowring again." $green
			printf '\n'
			;;
		*)
			printf "Thank you for using GreenHouse. Have a lovely sunny day and may the plants be ever in your favour.\n"
			printf '\n'
			exit;
			;;
	esac
fi